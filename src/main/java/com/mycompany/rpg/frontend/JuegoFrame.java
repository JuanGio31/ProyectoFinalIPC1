package com.mycompany.rpg.frontend;

import com.mycompany.rpg.backend.ControladorPartida;
import com.mycompany.rpg.backend.*;
import com.mycompany.rpg.backend.personaje.jugable.Jugable;
import com.mycompany.rpg.backend.tablero.CreadorTablero;
import com.mycompany.rpg.backend.tablero.Tablero;
import com.mycompany.rpg.backend.tienda.item.ElixirVerde;
import com.mycompany.rpg.backend.tienda.item.Item;
import com.mycompany.rpg.backend.tienda.item.SemillaDeLaVida;
import com.mycompany.rpg.backend.util.*;
import java.awt.*;
import java.awt.event.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author giovanic Frame que muesta el proceso de la partida
 */
public class JuegoFrame extends javax.swing.JFrame {

    private final MenuPrincipalFrame menu;
    private final Listado<CreadorTablero> tab;
    private final ManejadorJugadores jugadores;
    private ControladorPartida controlPartida;
    private TiendaDialog tienda;
    private final ControladorArchivos controladorArchivos;

    /**
     * Creates new form JuegoFrame
     *
     * @param menu recibe un frame
     * @param jugadores listado de jugadores
     * @param tab
     * @param controladorArchivos
     */
    public JuegoFrame(MenuPrincipalFrame menu, ManejadorJugadores jugadores,
            Listado<CreadorTablero> tab, ControladorArchivos controladorArchivos) {
        this.personajesSeleccionados = new Jugable[2];
        this.menu = menu;
        this.jugadores = jugadores;
        this.tab = tab;
        this.controladorArchivos = controladorArchivos;
        initComponents();

        this.menu.setVisible(false);

        this.setTitle("Juego en curso");
        setLocation(60, 30);
        setDefaultCloseOperation(0);

        cargarElementosRegistro();
        txtAcciones.setEditable(false);

        mapPanel.setLocation(10, 10);

        llenarComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        regDialog = new javax.swing.JDialog();
        selPersonajePartida = new javax.swing.JDialog();
        panelSelec = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        selPrimerPer = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        selSegPer = new javax.swing.JComboBox<>();
        btnSelPerPartida = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaInfoPersonaje = new javax.swing.JTextArea();
        dialogTablero = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        btnCargarMapSel = new javax.swing.JButton();
        selTabComboBox = new javax.swing.JComboBox<>();
        mapPanel = new javax.swing.JPanel();
        opPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        enTurnoLbl = new javax.swing.JLabel();
        inputTxt = new javax.swing.JTextField();
        btnRegresar = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblJugPrincipal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAcciones = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        bntArchivo = new javax.swing.JMenu();
        mItemcargarMapa = new javax.swing.JMenuItem();
        mItemGuardarPart = new javax.swing.JMenuItem();

        javax.swing.GroupLayout regDialogLayout = new javax.swing.GroupLayout(regDialog.getContentPane());
        regDialog.getContentPane().setLayout(regDialogLayout);
        regDialogLayout.setHorizontalGroup(
            regDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        regDialogLayout.setVerticalGroup(
            regDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        selPersonajePartida.setMinimumSize(new java.awt.Dimension(508, 470));
        selPersonajePartida.setResizable(false);

        jLabel3.setText("Seleccionar Personaje Principal");

        jLabel4.setText("Seleccionar Personaje Secundario");

        btnSelPerPartida.setText("Aceptar");

        javax.swing.GroupLayout panelSelecLayout = new javax.swing.GroupLayout(panelSelec);
        panelSelec.setLayout(panelSelecLayout);
        panelSelecLayout.setHorizontalGroup(
            panelSelecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSelecLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSelecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selPrimerPer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(82, 82, 82)
                .addGroup(panelSelecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSelPerPartida)
                    .addComponent(selSegPer, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(24, 24, Short.MAX_VALUE))
        );
        panelSelecLayout.setVerticalGroup(
            panelSelecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelecLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(panelSelecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelSelecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSelecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selPrimerPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selSegPer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSelPerPartida)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtAreaInfoPersonaje.setColumns(20);
        txtAreaInfoPersonaje.setRows(5);
        jScrollPane2.setViewportView(txtAreaInfoPersonaje);

        javax.swing.GroupLayout selPersonajePartidaLayout = new javax.swing.GroupLayout(selPersonajePartida.getContentPane());
        selPersonajePartida.getContentPane().setLayout(selPersonajePartidaLayout);
        selPersonajePartidaLayout.setHorizontalGroup(
            selPersonajePartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSelec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(selPersonajePartidaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        selPersonajePartidaLayout.setVerticalGroup(
            selPersonajePartidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selPersonajePartidaLayout.createSequentialGroup()
                .addComponent(panelSelec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );

        dialogTablero.setTitle("Cargar Mapa");
        dialogTablero.setLocation(new java.awt.Point(50, 50));
        dialogTablero.setMinimumSize(new java.awt.Dimension(310, 80));

        jPanel1.setMaximumSize(new java.awt.Dimension(310, 62));
        jPanel1.setMinimumSize(new java.awt.Dimension(310, 62));

        btnCargarMapSel.setText("Seleccionar Mapa");
        btnCargarMapSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarMapSelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selTabComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCargarMapSel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargarMapSel)
                    .addComponent(selTabComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dialogTableroLayout = new javax.swing.GroupLayout(dialogTablero.getContentPane());
        dialogTablero.getContentPane().setLayout(dialogTableroLayout);
        dialogTableroLayout.setHorizontalGroup(
            dialogTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogTableroLayout.setVerticalGroup(
            dialogTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mapPanel.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setText("JUGADOR");

        inputTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputTxtKeyPressed(evt);
            }
        });

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/regresar.png"))); // NOI18N
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/play.png"))); // NOI18N
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        jLabel2.setText("Indicar accion");

        javax.swing.GroupLayout opPanelLayout = new javax.swing.GroupLayout(opPanel);
        opPanel.setLayout(opPanelLayout);
        opPanelLayout.setHorizontalGroup(
            opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblJugPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(opPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(enTurnoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(opPanelLayout.createSequentialGroup()
                        .addComponent(btnPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegresar))
                    .addGroup(opPanelLayout.createSequentialGroup()
                        .addGroup(opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        opPanelLayout.setVerticalGroup(
            opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(enTurnoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblJugPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(opPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRegresar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        txtAcciones.setColumns(20);
        txtAcciones.setRows(5);
        jScrollPane1.setViewportView(txtAcciones);

        bntArchivo.setText("Archivo");

        mItemcargarMapa.setText("Cargar Mapa");
        mItemcargarMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemcargarMapaActionPerformed(evt);
            }
        });
        bntArchivo.add(mItemcargarMapa);

        mItemGuardarPart.setText("Guardar");
        mItemGuardarPart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemGuardarPartActionPerformed(evt);
            }
        });
        bntArchivo.add(mItemGuardarPart);

        jMenuBar1.add(bntArchivo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(opPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        if (controlPartida.getJuegoActivo() != null) {
            int op = JOptionPane.showConfirmDialog(null,
                    """
                    Esta seguro que desea abandonar la partida?
                    perdera todos los objetos comprados""",
                    "Regresar al Menu Principal",
                    JOptionPane.YES_NO_OPTION);
            if (op == 0) {
                if (controlPartida.getJuegoActivo().getBot().getEnemigos() != null) {
                    controlPartida.getJuegoActivo().getUsuario().setPuntuacion(controlPartida.getJuegoActivo().getBot().darPuntos());
                    controlPartida.getJuegoActivo().getUsuario().getInventario().setItems(null);
                    this.controlPartida.finalizarJuego();
                    dispose();
                    menu.setVisible(true);
                }
            }
        } else {
            dispose();
            menu.setVisible(true);
        }
    }//GEN-LAST:event_btnRegresarActionPerformed


    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        dialogTablero.setLocationRelativeTo(null);
        dialogTablero.setVisible(true);
    }//GEN-LAST:event_btnPlayActionPerformed

    private void mItemcargarMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemcargarMapaActionPerformed
        this.crearNuevoTablero();
        controladorArchivos.guardarTableros(tab);
    }//GEN-LAST:event_mItemcargarMapaActionPerformed

    private void inputTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTxtKeyPressed
        if (this.controlPartida.estaEnJuegoActivo()) {
            if (controlPartida.getJuegoActivo().isTurno()) {
                //Tecla Shift para seleccionar un objeto
                if (evt.getKeyCode() == 16) {
                    System.out.println("se abre el selector de Objetos");
                    cargarSelectorObjetos();
                    limpiarTablero();
                    pintarMapa();
                }

                //Tecla Ctrl para cambiar de personaje
                if (evt.getKeyCode() == 17) {
                    this.controlPartida.cambiarPersonajeJugable();
                    limpiarTablero();
                    pintarMapa();
                }

                //teclas direccionales
                if (evt.getKeyCode() > 30 && evt.getKeyCode() < 50) {
                    this.controlPartida.moverJugador(evt.getKeyCode());
                    limpiarTablero();
                    this.pintarMapa();
                }

                //teclas A, S, D, W
                // A-> ataque-izquierda, S-> ataque-abajo, D-> ataque-derecha, W->ataque-arriba
                if (evt.getKeyCode() == 65 || evt.getKeyCode() == 68
                        || evt.getKeyCode() == 83 || evt.getKeyCode() == 87) {
                    this.controlPartida.atacarEnDireccion(evt.getKeyCode());
                }
            }
        } else {
            mostrarMensajeJuegoInactivo();
        }
        inputTxt.setText("");
    }//GEN-LAST:event_inputTxtKeyPressed

    private void mItemGuardarPartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemGuardarPartActionPerformed
        controladorArchivos.guardarPartida(controlPartida.getJuegoActivo(),
                controlPartida.getJuegoActivo().getUsuario());
    }//GEN-LAST:event_mItemGuardarPartActionPerformed

    private void btnCargarMapSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarMapSelActionPerformed
        this.limpiarTablero();
        this.iniciarMapa();
        this.pack();
    }//GEN-LAST:event_btnCargarMapSelActionPerformed

    public void iniciarMapa() {
        if (selTabComboBox.getSelectedIndex() != -1) {
            controlPartida.seleccionarTablero(selTabComboBox.getSelectedIndex());
            this.pintarMapa();
            dialogTablero.setVisible(false);
            controlPartida.getJuegoActivo().colocarPersonajes();
            limpiarTablero();
            this.pintarMapa();
        } else {
            JOptionPane.showMessageDialog(null,
                    "No se seleccionó un mapa valido",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        dialogTablero.setVisible(false);
    }

    public void pintarMapa() {
        cantidadTurnos++;
        Tablero mp = this.controlPartida.getJuegoActivo().getTab();
        GridLayout gl = (GridLayout) mapPanel.getLayout();
        gl.setRows(mp.getCasillas().length);
        gl.setColumns(mp.getCasillas()[0].length);
        gl.setHgap(2);
        gl.setVgap(2);
        for (int i = 0; i < mp.getCasillas().length; i++) {
            for (int j = 0; j < mp.getCasillas()[0].length; j++) {
                mapPanel.add(mp.getCasillas()[i][j]);
            }
        }

        if (controlPartida.getJuegoActivo().getBot().getEnemigos() != null) {
            enTurnoLbl.setText(this.controlPartida.getJuegoActivo().getUsuario().getNombre());
            this.controlPartida.getJuegoActivo().comprobarGanador(this);
            if (controlPartida.getJuegoActivo().getTab().getPlayerPosicion() != null) {
                controlPartida.aplicarEfectoLava();
            }
            actualizarStatus();
        }
        mapPanel.validate();
        mapPanel.repaint();
        this.pack();
    }

    public void limpiarTablero() {
        mapPanel.removeAll();
        mapPanel.validate();
        mapPanel.repaint();
    }

    /**
     * Metodo de mensaje informativo
     */
    private void mostrarMensajeJuegoInactivo() {
        JOptionPane.showMessageDialog(null,
                "No se encuentra en una partida activa",
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    public MenuPrincipalFrame getMenu() {
        return menu;
    }

    /**
     * Metodo para mostrar la informacion de los movimientos que realizan los
     * jugadores
     *
     * @param str Mensaje a
     */
    public void modificarTxtArea(String str) {
        if (cantidadTurnos == 3) {
            txtAcciones.setText("");
            cantidadTurnos = 0;
        }
        txtAcciones.append(str);
        txtAcciones.append(System.getProperty("line.separator"));
    }

    //------------- Componentes Registro de Jugadores Dialog ---------------------------------------------------------------------------------------
    private void cargarComponentesPanel1() {
        JButton btnContinuar = new JButton("Continuar");
        btnContinuar.setBackground(Color.white);
        btnContinuar.setForeground(Color.black);
        btnContinuar.setBounds(50, 40, 200, 50);
        btnContinuar.setFont(fuente);

        JButton btnNuevaPart = new JButton("Nueva Partida");
        btnNuevaPart.setBackground(Color.white);
        btnNuevaPart.setForeground(Color.black);
        btnNuevaPart.setBounds(50, 100, 200, 50);
        btnNuevaPart.setFont(fuente);

        JButton btnRMenu = new JButton("Ir a Menu");
        btnRMenu.setBackground(Color.white);
        btnRMenu.setForeground(Color.black);
        btnRMenu.setBounds(50, 160, 200, 50);
        btnRMenu.setFont(fuente);

        primerPanel.add(btnContinuar);
        primerPanel.add(btnNuevaPart);
        primerPanel.add(btnRMenu);

        btnContinuar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jugadores.obtenerTamanio() > 0) {
                    cargarComponentesPanel2();
                } else {
                    JOptionPane.showMessageDialog(
                            null,
                            "No hay registro de jugadores",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        btnNuevaPart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cargarComponentesPanel3();
            }
        });

        btnRMenu.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                regDialog.dispose();
                dispose();
                menu.setVisible(true);
            }
        });

    }

    // Continuar partida
    private void cargarComponentesPanel2() {
        primerPanel.setVisible(false);

        usuarios = new JComboBox<>();
        usuarios.setBounds(50, 40, 200, 50);
        llenarComboBox(usuarios);

        JButton btnAceptar0 = new JButton("Aceptar");
        btnAceptar0.setBackground(Color.white);
        btnAceptar0.setForeground(Color.black);
        btnAceptar0.setBounds(50, 100, 200, 50);
        btnAceptar0.setFont(fuente);

        JButton btnRegresar1 = new JButton("Regresar");
        btnRegresar1.setBackground(Color.white);
        btnRegresar1.setForeground(Color.black);
        btnRegresar1.setBounds(50, 160, 200, 50);
        btnRegresar1.setFont(fuente);

        panelContinuar.add(usuarios);
        panelContinuar.add(btnAceptar0);
        panelContinuar.add(btnRegresar1);

        btnAceptar0.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int select = usuarios.getSelectedIndex();

                controlPartida = new ControladorPartida(menu.getTabs(),
                        jugadores.obtenerJugador(select));

                String file_name = "persistencia/partidas/"
                        + jugadores.obtenerJugador(select).getNombrePartidaGuardada();

                if (controladorArchivos.comprobarExistencia(file_name)) {
                    int op = JOptionPane.showConfirmDialog(null,
                            "Tiene una partida guardada, desea continuarla?",
                            "Continuar Partida",
                            JOptionPane.YES_NO_OPTION);
                    if (op == 0) {
                        try {
                            controlPartida.setJuegoActivo(controladorArchivos.leerPartida(new FileInputStream(file_name)));
                            jugadores.modificarJugador(select, controlPartida.getJuegoActivo().getUsuario());
                            pintarMapa();
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(JuegoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        controladorArchivos.eliminarArchivo(file_name);
                        cargarComponenteSeleccion(
                                jugadores.obtenerJugador(select).getInventario().getJugables(),
                                jugadores.obtenerJugador(select));
                    }
                } else {
                    cargarComponenteSeleccion(
                            jugadores.obtenerJugador(select).getInventario().getJugables(),
                            jugadores.obtenerJugador(select));
                }

                mandarFr();
                regDialog.dispose();
            }
        });

        btnRegresar1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                panelContinuar.setVisible(false);
                primerPanel.setVisible(true);
                cargarComponentesPanel1();
            }
        });

        panelContinuar.setVisible(true);
    }

    //Nuevo juego
    private void cargarComponentesPanel3() {
        primerPanel.setVisible(false);

        JTextField entrada = new JTextField();
        entrada.setBounds(50, 40, 200, 50);

        JButton btnAceptar1 = new JButton("Aceptar");
        btnAceptar1.setBackground(Color.white);
        btnAceptar1.setForeground(Color.black);
        btnAceptar1.setBounds(50, 100, 200, 50);
        btnAceptar1.setFont(fuente);

        JButton btnRegresar2 = new JButton("Regresar");
        btnRegresar2.setBackground(Color.white);
        btnRegresar2.setForeground(Color.black);
        btnRegresar2.setBounds(50, 160, 200, 50);
        btnRegresar2.setFont(fuente);

        panelNuevaPartida.add(entrada);
        panelNuevaPartida.add(btnAceptar1);
        panelNuevaPartida.add(btnRegresar2);

        btnAceptar1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jugadores.registrarJugador(new JugadorUs(entrada.getText()));
                boolean esValido = false;
                while (!esValido) {
                    iniciarTienda(jugadores.obtenerJugador(jugadores.obtenerTamanio() - 1));
                    if (jugadores.obtenerJugador(jugadores.obtenerTamanio() - 1).getInventario().getJugables().getSize() < 2) {
                        if (jugadores.obtenerJugador(jugadores.obtenerTamanio() - 1).getOro() < 200) {
                            try {
                                jugadores.obtenerListadoJugadores().eliminarUltimo();
                            } catch (ListaException ex) {
                                System.out.println("error ->" + ex.getMessage());
                            }
                            JOptionPane.showMessageDialog(null,
                                    "Debe seleccionar 2 personajes",
                                    "Importante",
                                    JOptionPane.INFORMATION_MESSAGE);
                            tienda.dispose();
                            return;
                        }
                        JOptionPane.showMessageDialog(null,
                                "Debe seleccionar 2 personajes",
                                "Importante",
                                JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        esValido = true;
                    }

                }

                cargarComponenteSeleccion(
                        jugadores.obtenerJugador(jugadores.obtenerTamanio() - 1).getInventario().getJugables(),
                        jugadores.obtenerJugador(jugadores.obtenerTamanio() - 1));

                controlPartida = new ControladorPartida(menu.getTabs(),
                        jugadores.obtenerJugador(
                                jugadores.obtenerTamanio() - 1));

                mandarFr();
                regDialog.dispose();
            }
        });

        btnRegresar2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                panelNuevaPartida.setVisible(false);
                primerPanel.setVisible(true);
                cargarComponentesPanel1();
            }
        });

        panelNuevaPartida.setVisible(true);
    }

    private void mandarFr() {
        this.controlPartida.setJuegoFrame(this);
    }

    private void cargarElementosRegistro() {
        this.regDialog.setLayout(null);
        this.regDialog.setSize(300, 300);
        this.regDialog.setResizable(false);
        this.regDialog.setLocationRelativeTo(null);
        this.regDialog.setDefaultCloseOperation(0);
        this.regDialog.setVisible(true);

        fuente = new Font("Comic Sans MS", Font.BOLD, 19);
        primerPanel = new JPanel(null);
        primerPanel.setBackground(Color.black);
        primerPanel.setBounds(0, 0, getWidth(), getHeight());
        primerPanel.setVisible(true);
        cargarComponentesPanel1();

        panelContinuar = new JPanel(null);
        panelContinuar.setBackground(Color.red);
        panelContinuar.setBounds(0, 0, getWidth(), getHeight());
        panelContinuar.setVisible(false);

        panelNuevaPartida = new JPanel(null);
        panelNuevaPartida.setBackground(Color.gray);
        panelNuevaPartida.setBounds(0, 0, getWidth(), getHeight());
        panelNuevaPartida.setVisible(false);

        this.regDialog.add(primerPanel);
        this.regDialog.add(panelContinuar);
        this.regDialog.add(panelNuevaPartida);
        this.setSize(0, 0);
    }

    private void llenarComboBox(JComboBox<String> list) {
        for (int i = 0; i < jugadores.obtenerTamanio(); i++) {
            list.addItem(jugadores.obtenerJugador(i).getNombre());
        }
    }

    private void iniciarTienda(JugadorUs jg) {
        if (jg != null) {
            this.tienda = new TiendaDialog(this, true, jg);
            this.tienda.setTitle("Tienda: " + jg.getNombre());
            tienda.setLocationRelativeTo(null);
            tienda.setVisible(true);
        }
    }
//---------------------- fin --------------------------------------------------

//----------------------- Componentes-Dialog para Seleccionar Personajes para jugar -------------------------------------------
    private void cargarComponenteSeleccion(Listado<Jugable> tmp, JugadorUs jg) {
        this.selPersonajePartida.setLocationRelativeTo(null);
        this.selPersonajePartida.setDefaultCloseOperation(0);
        this.selPersonajePartida.setTitle("Seleccionar Personajes");

        for (int i = 0; i < jg.getInventario().getJugables().getSize(); i++) {
            try {
                selPrimerPer.addItem((i + 1) + ".- " + jg.getInventario().getJugables().obtenerElemento(i).getNombre());
                selSegPer.addItem((i + 1) + ".- " + jg.getInventario().getJugables().obtenerElemento(i).getNombre());
            } catch (ListaException ex) {
                Logger.getLogger(JuegoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        cargarTxtAreaInfo(tmp);

        btnSelPerPartida.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    personajesSeleccionados[0] = jg.getInventario().getJugables().obtenerElemento(selPrimerPer.getSelectedIndex());
                    personajesSeleccionados[1] = jg.getInventario().getJugables().obtenerElemento(selSegPer.getSelectedIndex());

                    // si los personajes seleccionados son diferentes
                    if (selPrimerPer.getSelectedIndex() != selSegPer.getSelectedIndex()) {
                        jg.setJugablesEnJuego(personajesSeleccionados);
                        selPersonajePartida.dispose();
                        setSize(358, 422);
                        setLocationRelativeTo(null);
                    } else {
                        mostrarMensaje("Los Id deben ser diferente");
                    }

                } catch (ListaException ex) {
                    System.out.println("error " + ex.getMessage());
                    mostrarMensaje(ex.getMessage());

                }
            }
        });

        controladorArchivos.guardarSesionJugadores(jugadores);
        this.selPersonajePartida.setVisible(true);
    }

    /**
     * Metodo que muesta las caracteristicas de los personajes que posee el
     * usuario
     *
     * @param personaje Listado de personajes
     */
    private void cargarTxtAreaInfo(Listado<Jugable> personaje) {
        for (int i = 0; i < personaje.getSize(); i++) {
            try {
                txtAreaInfoPersonaje.append("ID: " + (i + 1));
                txtAreaInfoPersonaje.append(System.getProperty("line.separator"));
                txtAreaInfoPersonaje.append(personaje.obtenerElemento(i).toString());
                txtAreaInfoPersonaje.append(System.getProperty("line.separator"));
                txtAreaInfoPersonaje.append(System.getProperty("line.separator"));
            } catch (ListaException ex) {
                System.out.println("error -> " + ex.getMessage());
            }
        }
    }

    private void mostrarMensaje(String str) {
        JOptionPane.showMessageDialog(null,
                str,
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }
//---------------------- fin --------------------------------------------------    
//--------------------------------------------- Cargar tableros ---------------------

    /**
     * Metodo para crear nuevos tableros a partir de un archivo y agregarlos a
     * la lista de tableros
     */
    public void crearNuevoTablero() {
        ControladorArchivos creator = new ControladorArchivos();
        Listado<CreadorTablero> map = creator.crearTablero();
        for (int i = 0; i < map.getSize(); i++) {
            try {
                this.tab.agregarElemento(map.obtenerElemento(i));
            } catch (ListaException ex) {
                System.out.println("error -> " + ex.getMessage());
            }
        }

        selTabComboBox.removeAllItems();
        llenarComboBox();
    }

    /**
     * Metodo para llenar comboBox de tableros
     */
    private void llenarComboBox() {
        for (int i = 0; i < tab.getSize(); i++) {
            try {
                selTabComboBox.addItem(tab.obtenerElemento(i).getIdentificador());
            } catch (ListaException ex) {
                System.out.println("error -> " + ex.getMessage());
            }
        }
    }
//------------------------- fin --------------------------------------    
//------------------ Componentes Selector Items ---------------------------------------------

    public void cargarSelectorObjetos() {
        if (controlPartida.getJuegoActivo().getUsuario().getInventario().getItems().estaVacia()) {
            JOptionPane.showMessageDialog(null, "No tienes objetos disponibles");
        } else {
            dialogItem = new JDialog(this, true);
            dialogItem.setSize(250, 190);
            dialogItem.setLayout(null);
            dialogItem.setResizable(false);
            dialogItem.setTitle("Seleccionar");
            dialogItem.setLocationRelativeTo(null);

            JPanel panelito = new JPanel(null);
            panelito.setBounds(0, 0, dialogItem.getWidth(), dialogItem.getHeight());
            panelito.setBackground(Color.black);
            panelito.setVisible(true);
            dialogItem.add(panelito);

            listItems = new JComboBox<>();
            listItems.setBounds(40, 40, 170, 40);

            for (int i = 0; i < controlPartida.getJuegoActivo().getUsuario().getInventario().getItems().getSize(); i++) {
                try {
                    listItems.addItem(controlPartida.getJuegoActivo().getUsuario().getInventario().getItems().obtenerElemento(i).getTipo());
                } catch (ListaException ex) {
                    System.out.println("error ->" + ex.getMessage());
                }
            }

            JButton btnAceptar0 = new JButton("Aceptar");
            btnAceptar0.setBackground(Color.white);
            btnAceptar0.setForeground(Color.black);
            btnAceptar0.setBounds(60, 100, 130, 40);

            KeyListener teclado = new KeyListener() {
                @Override
                public void keyTyped(KeyEvent e) {

                }

                @Override
                public void keyPressed(KeyEvent e) {
                    if (e.getKeyCode() == 0x1B) {
                        dialogItem.dispose();
                    }
                }

                @Override
                public void keyReleased(KeyEvent e) {

                }
            };

            listItems.addKeyListener(teclado);
            panelito.add(listItems);
            panelito.add(btnAceptar0);

            btnAceptar0.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int select = listItems.getSelectedIndex();
                    if (select != -1 && controlPartida.getJuegoActivo().getUsuario().getInventario().getItems() != null) {
                        try {
                            Item tmp = controlPartida.getJuegoActivo().getUsuario().getInventario().getItems().obtenerElemento(select);
                            if (tmp instanceof SemillaDeLaVida) {
                                for (int i = 0; i < personajesSeleccionados.length; i++) {
                                    if (!personajesSeleccionados[i].estaVivo()) {
                                        personajesSeleccionados[i].revivir();
                                        txtAcciones.append("A usado el objeto semilla de la vida y ha resucitado a un personaje");
                                        txtAreaInfoPersonaje.append(System.getProperty("line.separator"));
                                        break;
                                    }
                                }
                            } else if (tmp instanceof ElixirVerde) {
                                controlPartida.getJuegoActivo().getUsuario().getJugablesEnJuego()[0].setVida(
                                        controlPartida.getJuegoActivo().getUsuario().getJugablesEnJuego()[0].getVida() + 50);
                                txtAcciones.append("A usado el objeto Elixir de la vida, ha recuperado +50 de vida");
                                txtAreaInfoPersonaje.append(System.getProperty("line.separator"));
                            } else {
                                controlPartida.getMovExtra();
                                txtAcciones.append("A usado el objeto Capa de movilidad, +1 movimiento");
                                txtAreaInfoPersonaje.append(System.getProperty("line.separator"));
                            }
                            controlPartida.getJuegoActivo().getUsuario().getInventario().getItems().eliminar(select);
                        } catch (ListaException ex) {
                            System.out.println("error ->" + ex.getMessage());
                        }
                        dialogItem.setVisible(false);
                    } else {
                        mostrarMensaje("No tienes objetos");
                        dialogItem.setVisible(false);
                    }
                }
            });

            dialogItem.setVisible(true);
        }
    }
//---------------------- fin --------------------------------------------------    

    private void actualizarStatus() {
        lblJugPrincipal.setText(
                controlPartida.getJuegoActivo().getUsuario().getJugablesEnJuego()[0].getNombre()
                + "   vida: "
                + String.format("%.1f", controlPartida.getJuegoActivo().getUsuario().getJugablesEnJuego()[0].getVida()));
    }

    //declaracion de variables propias
    private int cantidadTurnos = 0;
    private final Jugable[] personajesSeleccionados;
    private javax.swing.JPanel primerPanel;
    private javax.swing.JPanel panelContinuar;
    private javax.swing.JPanel panelNuevaPartida;
    private Font fuente;
    private javax.swing.JComboBox<String> usuarios;
    private javax.swing.JComboBox<String> listItems;
    private javax.swing.JDialog dialogItem;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu bntArchivo;
    private javax.swing.JButton btnCargarMapSel;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnSelPerPartida;
    private javax.swing.JDialog dialogTablero;
    private javax.swing.JLabel enTurnoLbl;
    private javax.swing.JTextField inputTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblJugPrincipal;
    private javax.swing.JMenuItem mItemGuardarPart;
    private javax.swing.JMenuItem mItemcargarMapa;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JPanel opPanel;
    private javax.swing.JPanel panelSelec;
    private javax.swing.JDialog regDialog;
    private javax.swing.JDialog selPersonajePartida;
    private javax.swing.JComboBox<String> selPrimerPer;
    private javax.swing.JComboBox<String> selSegPer;
    private javax.swing.JComboBox<String> selTabComboBox;
    private javax.swing.JTextArea txtAcciones;
    private javax.swing.JTextArea txtAreaInfoPersonaje;
    // End of variables declaration//GEN-END:variables

}
