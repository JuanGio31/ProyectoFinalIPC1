package com.mycompany.rpg.frontend;

import com.mycompany.rpg.backend.JugadorUs;
import com.mycompany.rpg.backend.tienda.Inventario;
import com.mycompany.rpg.backend.tienda.item.*;
import com.mycompany.rpg.backend.tienda.mejora.*;
import com.mycompany.rpg.backend.util.ListaException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author giovanic
 */
public class InventarioFrame extends javax.swing.JDialog {

    private final JugadorUs jugador;

    /**
     * Creates new form InventarioFrame
     *
     * @param parent frame que lo invoca
     * @param jugador usuario en juego
     */
    public InventarioFrame(java.awt.Frame parent, JugadorUs jugador) {
        super(parent, true);
        this.jugador = jugador;
        initComponents();

        cargarTabla(jugador.getInventario());
        inputTxt.setVisible(false);
        selObjAVender.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPersonaje = new javax.swing.JTable();
        inputTxt = new javax.swing.JTextField();
        btnMasVida = new javax.swing.JButton();
        btnMasMov = new javax.swing.JButton();
        btnMasDanio = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaObjetos = new javax.swing.JTable();
        selObjAVender = new javax.swing.JTextField();
        btnVender = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaMejoras = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tablaPersonaje.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Personaje", "Vida", "Danio", "Movimientos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPersonaje.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPersonajeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaPersonaje);
        if (tablaPersonaje.getColumnModel().getColumnCount() > 0) {
            tablaPersonaje.getColumnModel().getColumn(4).setResizable(false);
        }

        btnMasVida.setText("+ Vida");
        btnMasVida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMasVidaActionPerformed(evt);
            }
        });

        btnMasMov.setText("+ 1Movimiento");
        btnMasMov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMasMovActionPerformed(evt);
            }
        });

        btnMasDanio.setText("+ Ataque");
        btnMasDanio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMasDanioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(inputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMasVida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMasDanio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMasMov))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMasVida)
                    .addComponent(btnMasMov)
                    .addComponent(btnMasDanio))
                .addGap(6, 6, 6))
        );

        jTabbedPane1.addTab("Mis Personajes", jPanel1);

        tablaObjetos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Objeto", "Efecto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaObjetos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaObjetosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaObjetos);

        btnVender.setText("Vender");
        btnVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVenderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(selObjAVender, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVender)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selObjAVender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVender)))
        );

        jTabbedPane1.addTab("Mis Objetos", jPanel2);

        tablaMejoras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Mejora", "Efecto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablaMejoras);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Mejoras Disponibles", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMasVidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMasVidaActionPerformed
        boolean existencia = false;
        try {
            for (int i = 0; i < jugador.getInventario().getMejoras().getSize(); i++) {
                if (jugador.getInventario().getMejoras().obtenerElemento(i) instanceof MejoraVida) {
                    existencia = true;
                }
            }

            if (existencia) {
                int tmp = Integer.parseInt(inputTxt.getText());
                jugador.getInventario().getJugables().obtenerElemento(tmp).setVida(
                        jugador.
                                getInventario().
                                getJugables().obtenerElemento(tmp).getVida() + 50);

                for (int i = 0; i < jugador.getInventario().getMejoras().getSize(); i++) {
                    if (jugador.getInventario().getMejoras().obtenerElemento(i) instanceof MejoraVida) {
                        jugador.getInventario().getMejoras().eliminar(i);
                        break;
                    }
                }
            } else {
                mostrarMensaje("No hay existencias");
            }

            cargarTabla(jugador.getInventario());
        } catch (ListaException | NumberFormatException e) {
            if (e instanceof NumberFormatException) {
                mostrarMensaje("Debe ingresar numeros");
            } else {
                System.out.println("error " + e.getMessage());
                mostrarMensaje(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnMasVidaActionPerformed

    private void btnMasDanioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMasDanioActionPerformed
        boolean existencia = false;
        try {
            for (int i = 0; i < jugador.getInventario().getMejoras().getSize(); i++) {
                if (jugador.getInventario().getMejoras().obtenerElemento(i) instanceof MejoraDanio) {
                    existencia = true;
                }
            }

            if (existencia) {
                int tmp = Integer.parseInt(inputTxt.getText());
                jugador.getInventario().getJugables().obtenerElemento(tmp).setDanio(
                        jugador.
                                getInventario().
                                getJugables().obtenerElemento(tmp).getDanio() + 10);

                for (int i = 0; i < jugador.getInventario().getMejoras().getSize(); i++) {
                    if (jugador.getInventario().getMejoras().obtenerElemento(i) instanceof MejoraDanio) {
                        jugador.getInventario().getMejoras().eliminar(i);
                        break;
                    }
                }
            } else {
                mostrarMensaje("No hay existencias");
            }

            cargarTabla(jugador.getInventario());
        } catch (ListaException | NumberFormatException e) {
            if (e instanceof NumberFormatException) {
                mostrarMensaje("Debe ingresar numeros");
            } else {
                System.out.println("error " + e.getMessage());
                mostrarMensaje(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnMasDanioActionPerformed

    private void btnMasMovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMasMovActionPerformed
        boolean existencia = false;
        try {
            for (int i = 0; i < jugador.getInventario().getMejoras().getSize(); i++) {
                if (jugador.getInventario().getMejoras().obtenerElemento(i) instanceof MejoraMovilidad) {
                    existencia = true;
                }
            }

            if (existencia) {
                int tmp = Integer.parseInt(inputTxt.getText());
                jugador.getInventario().getJugables().obtenerElemento(tmp).setMovimineto(
                        jugador.
                                getInventario().
                                getJugables().obtenerElemento(tmp).getMovimineto() + 1);

                for (int i = 0; i < jugador.getInventario().getMejoras().getSize(); i++) {
                    if (jugador.getInventario().getMejoras().obtenerElemento(i) instanceof MejoraMovilidad) {
                        jugador.getInventario().getMejoras().eliminar(i);
                        break;
                    }
                }
            } else {
                mostrarMensaje("No hay existencias");
            }

            cargarTabla(jugador.getInventario());
        } catch (ListaException | NumberFormatException e) {
            if (e instanceof NumberFormatException) {
                mostrarMensaje("Debe ingresar numeros");
            } else {
                System.out.println("error " + e.getMessage());
                mostrarMensaje(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnMasMovActionPerformed

    private void btnVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVenderActionPerformed
        boolean existencia = false;
        try {            
            for (int i = 0; i < jugador.getInventario().getItems().getSize(); i++) {
                existencia = true;
            }

            if (existencia) {
                int tmp = Integer.parseInt(selObjAVender.getText());
                if (jugador.getInventario().getItems().obtenerElemento(tmp) instanceof CapaDeMovilidad) {
                    jugador.setOro(jugador.getOro() + 75);
                }
                if (jugador.getInventario().getItems().obtenerElemento(tmp) instanceof ElixirVerde) {
                    jugador.setOro(jugador.getOro() + 25);
                }
                if (jugador.getInventario().getItems().obtenerElemento(tmp) instanceof SemillaDeLaVida) {
                    jugador.setOro(jugador.getOro() + 50);
                }
                jugador.getInventario().getItems().eliminar(tmp);

            } else {
                mostrarMensaje("No hay existencias");
            }

            cargarTabla(jugador.getInventario());
        } catch (ListaException | NumberFormatException e) {
            if (e instanceof NumberFormatException) {
                mostrarMensaje("No ha seleccionado ningun objeto, debe seleccionar un objeto");
            } else {
                System.out.println("error " + e.getMessage());
                mostrarMensaje(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnVenderActionPerformed

    private void tablaPersonajeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPersonajeMouseClicked
        int select = tablaPersonaje.rowAtPoint(evt.getPoint());
        inputTxt.setText(String.valueOf(tablaPersonaje.getValueAt(select, 0)));
    }//GEN-LAST:event_tablaPersonajeMouseClicked

    private void tablaObjetosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaObjetosMouseClicked
        int select = tablaObjetos.rowAtPoint(evt.getPoint());
        selObjAVender.setText(String.valueOf(tablaObjetos.getValueAt(select, 0)));
    }//GEN-LAST:event_tablaObjetosMouseClicked

    private void mostrarMensaje(String str) {
        JOptionPane.showMessageDialog(null,
                str,
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    private void cargarTabla(Inventario inventario) {
        // Tabla de personajes.
        String[] nombreColumnas = new String[]{"ID", "Personaje", "Vida", "Danio", "Movimientos"};
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(nombreColumnas);

        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }

        for (int i = 0; i < inventario.getJugables().getSize(); i++) {
            try {
                Object[] tmp = new Object[5];
                tmp[0] = i;
                tmp[1] = inventario.getJugables().obtenerElemento(i).getNombre();
                tmp[2] = inventario.getJugables().obtenerElemento(i).getVida();
                tmp[3] = inventario.getJugables().obtenerElemento(i).getDanio();
                tmp[4] = inventario.getJugables().obtenerElemento(i).getMovimineto();
                modelo.addRow(tmp);
            } catch (ListaException ex) {
                System.out.println("error -> " + ex.getMessage());
            }
        }
        tablaPersonaje.setModel(modelo);

        // Tabla de objetos
        String[] nombreColumnas2 = new String[]{"ID", "Objeto", "Efecto"};
        DefaultTableModel modelo2 = new DefaultTableModel();
        modelo2.setColumnIdentifiers(nombreColumnas2);

        while (modelo2.getRowCount() > 0) {
            modelo2.removeRow(0);
        }

        if (inventario.getItems() != null) {
            for (int i = 0; i < inventario.getItems().getSize(); i++) {
                try {
                    Object[] tmp = new Object[3];
                    tmp[0] = i;
                    tmp[1] = inventario.getItems().obtenerElemento(i).getTipo();
                    tmp[2] = inventario.getItems().obtenerElemento(i).getUso();
                    modelo2.addRow(tmp);
                } catch (ListaException ex) {
                    System.out.println("error -> " + ex.getMessage());
                }
            }
        }
        tablaObjetos.setModel(modelo2);

        //Tabla de Mejoras
        String[] nombreColumnas3 = new String[]{"ID", "Mejora", "Efecto"};
        DefaultTableModel modelo3 = new DefaultTableModel();
        modelo3.setColumnIdentifiers(nombreColumnas3);

        while (modelo3.getRowCount() > 0) {
            modelo3.removeRow(0);
        }

        if (inventario.getMejoras() != null) {
            for (int i = 0; i < inventario.getMejoras().getSize(); i++) {
                try {
                    Object[] tmp = new Object[3];
                    tmp[0] = i;
                    tmp[1] = inventario.getMejoras().obtenerElemento(i).getTipo();
                    tmp[2] = inventario.getMejoras().obtenerElemento(i).getBeneficio();
                    modelo3.addRow(tmp);
                } catch (ListaException ex) {
                    System.out.println("error -> " + ex.getMessage());
                }
            }
        }
        tablaMejoras.setModel(modelo3);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMasDanio;
    private javax.swing.JButton btnMasMov;
    private javax.swing.JButton btnMasVida;
    private javax.swing.JButton btnVender;
    private javax.swing.JTextField inputTxt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField selObjAVender;
    private javax.swing.JTable tablaMejoras;
    private javax.swing.JTable tablaObjetos;
    private javax.swing.JTable tablaPersonaje;
    // End of variables declaration//GEN-END:variables
}
